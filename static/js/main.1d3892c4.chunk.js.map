{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["fetch","require","dataSource","process","Boolean","window","location","hostname","match","ReactDOM","render","useState","dataMaster","setDataMaster","filterTier","setFilterTier","filterName","setFilterName","useEffect","then","response","json","r","values","catch","filterTierChange","e","tier","parseInt","target","value","updateTiers","indexOf","splice","push","copyCommandText","select","setSelectionRange","document","execCommand","valueHolder","tempTarget","setTimeout","imgRegex","dataDisplay","filter","i","j","k","length","toLowerCase","startsWith","sort","map","cost","className","key","href","rel","class","style","backgroundImage","rows","onClick","replace","readOnly","exec","id","type","placeholder","onChange","name","checked","some","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1d3892c4.chunk.js","sourcesContent":["//import React, { Component } from 'react';\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nconst fetch = require('node-fetch');\n\nlet dataSource=`https://sheets.googleapis.com/v4/spreadsheets/${process.env.REACT_APP_GSHEETID}/values/${process.env.REACT_APP_GSHEET}!A1:D500?key=${process.env.REACT_APP_GKEY}`\n\n//Project created to refactor to React Hooks.\n\n\n//export default class App extends Component{\nexport default function App () {\n/*  constructor(props){\n    super(props);\n    this.state = {\n      dataMaster: [],\n      filterTier: [1,2,3],\n      filterName: '',\n    };\n   this.filterNameChange = this.filterNameChange.bind(this);\n   this.filterTierChange = this.filterTierChange.bind(this);\n   this.copyCommandText = this.copyCommandText.bind(this);\n  }\n*/\nconst [dataMaster, setDataMaster] = useState([]);\nconst [filterTier, setFilterTier] = useState([1,2,3]);\nconst [filterName, setFilterName] = useState('');\n\n//componentDidMount(){\nuseEffect( () => {\n    fetch(dataSource)\n    .then(response => response.json())\n    .then(r => {\n//    this.setState({ dataMaster: r.values || [], })\n      setDataMaster(r.values || []);\n    })\n    .catch()\n    }\n,[] ); // +\n\n//filterNameChange(e) {\nconst filterNameChange = e => {\n//  this.setState({ filterName: e.target.value });\n    setFilterName(e.target.value);\n  };\n\n//filterTierChange(e) {\nconst filterTierChange = e => {\n  let tier = parseInt(e.target.value)\n//  let updateTiers = [...this.state.filterTier]\n  let updateTiers = [...filterTier]\n  if(updateTiers.indexOf(tier) >= 0){\n    updateTiers.splice(updateTiers.indexOf(tier),1)\n  }\n  else{\n    updateTiers.push(tier)\n  }\n//  this.setState({ filterTier: updateTiers });\n    setFilterTier(updateTiers);\n  }\n\n//  copyCommandText(e) {\n const copyCommandText = e => {\n      if(e.target.value === 'Copied To Clipboard!') return;\n      e.target.select();\n      e.target.setSelectionRange(0, 99999); // mobile\n      document.execCommand(\"Copy\");\n      let valueHolder = e.target.value\n      let tempTarget = e.target\n      e.target.value ='Copied To Clipboard!'\n      setTimeout(()=> { tempTarget.value = valueHolder }, 2000);\n};\n\n//render() { // refactoring done inline\n  let imgRegex = /(\\d+)(?=\\/)/\n  let dataDisplay = [.../*this.state.*/dataMaster]\n    .filter( (i,j) => {\n    if(j > 0 && i[0] === /*this.state.*/dataMaster[j-1][0]) return false //Remove Duplicates\n    for(let k = 0; k <= /*this.state.*/filterTier.length; k++){\n      if(i[1] === `TIER ${/*this.state.*/filterTier[k]}`\n          && i[0].toLowerCase().startsWith(/*this.state.*/filterName.toLowerCase())){\n        return true\n      }\n    }\n    return false;\n    })\n    .sort()\n    .map( (i,j) => {\n      let tier = i[1]\n      let cost = tier === 'TIER 1' ? '6,000' : tier === 'TIER 2' ? '12,000' : '20,000'\n      return(\n      <div className='itemContainer' key={i[0]}>\n        <div className='itemContainerBack'>\n          <a href={i[3]} target='_blank' rel=\"noopener noreferrer\" className='itemName'><i class=\"fab fa-steam-square\"></i>{ ' ' + i[0]}</a>\n          <div className='itemImage' style={ { backgroundImage: `url(${process.env.PUBLIC_URL + '/card_back.jpg'})`  } } >\n            <textarea rows=\"2\" onClick={/*this.*/copyCommandText} value={`!redeem game${tier.replace('TIER ','')} ${i[0]}` } readOnly=\"readonly\"/>\n            <div className='itemBackInfo'>Click Name To Open Steam Store<br />Click Command To Copy To Clipboard</div>\n          </div>\n          <div className='itemInfo'>\n            <p className='itemTier'>{tier}</p>\n            <p className='itemCost'>{cost} <i className=\"fas fa-puzzle-piece\">'s</i></p>\n          </div>\n        </div>\n        <div className='itemContainerFront'>\n          <p className='itemName'>{i[0]}</p>\n            <div className='itemImage' style={ { backgroundImage: `url(https://steamcdn-a.akamaihd.net/steam/apps/${imgRegex.exec(i[3])[0]}/header.jpg)`  } } />\n          <div className='itemInfo'>\n            <p className='itemTier'>{tier}</p>\n            <p className='itemCost'>{cost} <i className=\"fas fa-puzzle-piece\">'s</i></p>\n          </div>\n       </div>\n     </div>\n    )\n\n    })\n\n  return (\n    <div id=\"appContainer\">\n      <h1 id=\"appHeader\">\n        Charlie's Loot Chest\n      </h1>\n      <h2 id=\"appSubHeader\">Craft A Key With The Pieces You Earn On<a href='https://www.twitch.tv/charliepryor' target='_blank' rel=\"noopener noreferrer\" className='itemName'>Twitch</a></h2>\n      <hr />\n      <nav id='filterControl'>\n        <input type=\"text\" placeholder=\"Filter By Name\" value={/*this.state.*/filterName} onChange={/*this.*/filterNameChange} />\n        <span>\n        <label><input type=\"checkbox\" value='1' name=\"tier\" onChange={/*this.*/filterTierChange} checked={/*this.state.*/filterTier.some(i => i === 1)}/>Tier 1</label>\n        <label><input type=\"checkbox\" value='2' name=\"tier\" onChange={/*this.*/filterTierChange} checked={/*this.state.*/filterTier.some(i => i === 2)}/>Tier 2</label>\n        <label><input type=\"checkbox\" value='3' name=\"tier\" onChange={/*this.*/filterTierChange} checked={/*this.state.*/filterTier.some(i => i === 3)}/>Tier 3</label>\n        </span>\n      </nav>\n      <hr />\n      <a href='https://cpry.net/freegames' target='_blank' rel=\"noopener noreferrer\" className='itemName'>Google Sheet View</a>\n      <div id=\"contentContainer\">\n          {!/*this.state*/dataMaster.length ? <p>Loading...</p>\n            : dataDisplay.length ? dataDisplay\n            : <p>No Games Found With These Filters</p>}\n      </div>\n    </div>\n  )\n//}; // - close render\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}