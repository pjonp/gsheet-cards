{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["fetch","require","dataSource","process","App","props","state","dataMaster","filterTier","filterName","filterNameChange","bind","filterTierChange","copyCommandText","then","response","json","r","setState","values","catch","e","this","target","value","tier","parseInt","updateTiers","indexOf","splice","push","select","setSelectionRange","document","execCommand","valueHolder","tempTarget","setTimeout","imgRegex","dataDisplay","filter","i","j","k","length","toLowerCase","startsWith","sort","map","cost","className","key","style","backgroundImage","rows","onClick","replace","readOnly","href","rel","exec","id","type","placeholder","onChange","name","checked","some","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.073978b5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nconst fetch = require('node-fetch');\n\nlet dataSource=`https://sheets.googleapis.com/v4/spreadsheets/15EjulSafzvsyoGKjuKMPCUKS4PHAU8q36h0r4125E6I/values/Sheet1!A1:D500?key=${process.env.REACT_APP_GKEY}`\n\nexport default class App extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      dataMaster: [],\n      filterTier: [1,2,3],\n      filterName: '',\n    };\n   this.filterNameChange = this.filterNameChange.bind(this);\n   this.filterTierChange = this.filterTierChange.bind(this);\n   this.copyCommandText = this.copyCommandText.bind(this);\n  }\n\n  componentDidMount(){\n    fetch(dataSource)\n    .then(response => response.json())\n    .then(r => {\n      this.setState({\n        dataMaster: r.values,\n      })\n    })\n    .catch()\n    }\n\nfilterNameChange(e) {\n  this.setState({\n    filterName: e.target.value\n      });\n  }\nfilterTierChange(e) {\n  let tier = parseInt(e.target.value)\n  let updateTiers = [...this.state.filterTier]\n  if(updateTiers.indexOf(tier) >= 0){\n    updateTiers.splice(updateTiers.indexOf(tier),1)\n  }\n  else{\n    updateTiers.push(tier)\n  }\n  this.setState({\n    filterTier: updateTiers\n      });\n  }\n  copyCommandText(e) {\n      if(e.target.value === 'Copied To Clipboard!') return;\n      e.target.select();\n      e.target.setSelectionRange(0, 99999); // mobile\n      document.execCommand(\"Copy\");\n\n      let valueHolder = e.target.value\n      let tempTarget = e.target\n      e.target.value ='Copied To Clipboard!'\n      setTimeout(()=> { tempTarget.value = valueHolder }, 2000);\n  }\n\nrender() {\n  let imgRegex = /(\\d+)(?=\\/)/\n  let dataDisplay = [...this.state.dataMaster]\n    .filter( (i,j) => {\n    if(j > 0 && i[0] === this.state.dataMaster[j-1][0]) return false //Remove Duplicates\n    for(let k = 0; k <= this.state.filterTier.length; k++){\n      if(i[1] === `TIER ${this.state.filterTier[k]}`\n          && i[0].toLowerCase().startsWith(this.state.filterName.toLowerCase())){\n        return true\n      }\n    }\n    return false;\n    })\n    .sort()\n    .map( (i,j) => {\n      let tier = i[1]\n      let cost = tier === 'TIER 1' ? '6,000' : tier === 'TIER 2' ? '12,000' : '20,000'\n      return(\n      <div className='itemContainer' key={i[0]}>\n        <div className='itemContainerBack'>\n          <p className='itemName'>{i[0]}</p>\n          <div className='itemImage' style={ { backgroundImage: `url(${process.env.PUBLIC_URL + 'panel.png'})`  } } >\n            <textarea rows=\"3\" onClick={this.copyCommandText} value={`!redeem game${tier.replace('TIER ','')} ${i[0]}` } readOnly=\"readonly\"/>\n            <a href={i[3]} target='_blank' rel=\"noopener noreferrer\">View In Steam Store</a>\n          </div>\n          <div className='itemInfo'>\n            <p className='itemTier'>{tier}</p>\n            <p className='itemCost'>{cost} <i className=\"fas fa-puzzle-piece\">'s</i></p>\n          </div>\n        </div>\n        <div className='itemContainerFront'>\n          <p className='itemName'>{i[0]}</p>\n            <div className='itemImage' style={ { backgroundImage: `url(https://steamcdn-a.akamaihd.net/steam/apps/${imgRegex.exec(i[3])[0]}/header.jpg)`  } } />\n          <div className='itemInfo'>\n            <p className='itemTier'>{tier}</p>\n            <p className='itemCost'>{cost} <i className=\"fas fa-puzzle-piece\">'s</i></p>\n          </div>\n       </div>\n     </div>\n    )\n\n    })\n\n  return (\n    <div id=\"appContainer\">\n      <h1 id=\"appHeader\">\n        CHARLIE'S STREAM STORE AVAILABILITY\n      </h1>\n      <h2 id=\"appSubHeader\">EARN PIECES by watching & chatting on Twitch</h2>\n      <nav id='filterControl'>\n        <input type=\"text\" placeholder=\"Filter By Name\" value={this.state.filterName} onChange={this.filterNameChange} />\n        <span>\n        <label><input type=\"checkbox\" value='1' name=\"tier\" onChange={this.filterTierChange} checked={this.state.filterTier.some(i => i === 1)}/>Tier 1</label>\n        <label><input type=\"checkbox\" value='2' name=\"tier\" onChange={this.filterTierChange} checked={this.state.filterTier.some(i => i === 2)}/>Tier 2</label>\n        <label><input type=\"checkbox\" value='3' name=\"tier\" onChange={this.filterTierChange} checked={this.state.filterTier.some(i => i === 3)}/>Tier 3</label>\n        </span>\n      </nav>\n      <content id=\"contentContainer\">\n          {!this.state.dataMaster.length ? <p>Loading...</p>\n            : dataDisplay.length ? dataDisplay\n            : <p>No Games Found With These Filters</p>}\n      </content>\n    </div>\n  )};\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}